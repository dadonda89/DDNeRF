# Parameters to setup experiment.
experiment:
  # Unique experiment identifier
  id: DDNeRF_beta_96_samples
  # Experiment logs will be stored at "logdir"/"id"
  logdir: logs/final_code
  # Seed for random number generators (for repeatability).
  randomseed: 42  # 8239
  # Number of training iterations.
  train_iters: 300001
  # Number of training iterations after which to validate.
  validate_every: 2000
  # Number of training iterations after which to checkpoint.
  save_every: 2000
  # Number of training iterations after which to print progress.
  print_every: 200

train_params:
  mse: True # JSD if True, KL else
  pdf_padding: True
  max_pdf_pad_iters: 500000
  gaussian_smooth_factor: 1.5
  final_smooth: 1.5
  local_smooth_factor: 0
  max_local_valus: 3
  finnish_smooth: 200000
  mu_regularization: 0.02
  sig_regularization: 0.02
  reg_loss_type: MSE_v1
  p: 2
  musig_activation: regular
  reg_reduction_factor: 1
  depth_analysis_rays: False # bool, if true analyze depth estimation
  loss_coeficients: [1, 1]
  dp_coeficient: 0.1

# Dataset parameters.
dataset:
  # Type of the dataset (Blender vs LLFF) uses to decide with load data functions will be in use
  type: LLFF
  # Base directory of dataset.
  basedir: ../data/beta
  # choose if each iteration sample ray from single image or from multiple:
  single_image_mode: True
  # Do not use NDC (normalized device coordinates). use only with forward facing scenes
  ndc_rays: False
  ndc_coef: 1
  # Near clip plane (clip all depth values closer than this threshold).
  near: 0 # 1
  # Far clip plane (clip all depth values farther than this threshold).
  far: 14 # 7
  # combined - sampling uniform with half of the samples up to 1, then log sampling
  combined_sampling_method: False
  combined_split: 2
  # Downsample factor (used to downsample input images)
  downsample_factor: 4
  bd_factor: False
  # when training is made with only part of the images
  reduce_image_number_by: 1
  # define if to normalize (divide all poses location in the distance of the mosr for poses from the world origin)
  normalize_poses: True
  normalize_factor: 5
  # indexes modulo for validation set
  llffhold: 10
  # at half the original resolution of 800 x 800, to save space.
  half_res: False
  # Stride (include one per "testskip" images in the dataset).
  testskip: 1

# Model parameters.
models:
  # Name of the torch.nn.Module class that implements the model.
  type: DDNerfModel
  # Whether or not to perform log sampling in the positional encoding
  # of the coordinates.
  log_sampling_xyz: True
  # Number of encoding functions to use in the positional encoding
  # of the coordinates.
  num_encoding_fn_xyz: 10
  # Number of encoding functions to use in the positional encoding
  # of the direction.
  num_encoding_fn_dir: 4
  # Whether or not to perform log sampling in the positional encoding
  # of the direction.
  log_sampling_dir: True

# Optimizer params.
optimizer:
  # Name of the torch.optim class used for optimization.
  type: Adam
  # Learning rate.
  lr: 1.0E-3

# Learning rate schedule.
scheduler:
  # Exponentially decay learning rate (in 1000 steps)
  lr_decay: 250
  # Rate at which to apply this decay.
  lr_decay_factor: 0.1

# NeRF parameters.
nerf:
  # Use viewing directions as input, in addition to the X, Y, Z coordinates.
  use_viewdirs: True
  # Encoding function for position (X, Y, Z).
  encode_position_fn: positional_encoding
  # Encoding function for ray direction (theta, phi).
  encode_direction_fn: positional_encoding
  # Training-specific parameters.
  ray_shape: 'cone'  # 'cylinder' or 'cone'
  train:
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    num_random_rays: 2048 # 1024 # 4096  # 32 * 32 * 4
    # Size of each chunk (rays are batched into "chunks" and passed through
    # the network)
    chunksize: 16384 #16384 #32768 #65536  # 131072  # 1024 * 32
    # Whether or not to perturb the sampled depth values.
    perturb: True
    # Number of depth samples per ray for the coarse network.
    num_coarse: 32
    # Number of depth samples per ray for the fine network.
    num_fine: 32
    # Whether to render models using a white background.
    white_background: False
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 1.
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False

  # Validation-specific parameters.
  validation:
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    chunksize: 16384 #65536   # 1024 * 32
    # Whether or not to perturb the sampled depth values.
    perturb: False
    # Number of depth samples per ray for the coarse network.
    num_coarse: 32
    # Number of depth samples per ray for the fine network.
    num_fine: 32
    # Whether to render models using a white background.
    white_background: False
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 1.
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False
    # Parameters to setup experiment.

